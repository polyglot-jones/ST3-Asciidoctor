// SYNTAX TEST "Packages/ST4-Asciidoctor/Syntaxes/Asciidoctor.sublime-syntax"
= Custom Styling With Attributes

AsciiDoc Documentation reference:
https://docs.asciidoctor.org/asciidoc/latest/text/highlight/[Highlight^] and
https://docs.asciidoctor.org/asciidoc/latest/text/text-span-built-in-roles/[Text Span^].

[NOTE]
==============
Some of these examples are actually
https://docs.asciidoctor.org/asciidoc/latest/text/text-span-built-in-roles/#text-span-syntax[Text Spans^], rather than Highlight/Mark formatting.
But right now, our syntax treats thes alike, so we'll just keep them here for the time being.
==============


== Highlight/Mark Constrained

[.big.red]*Source*

[source,asciidoc]
--------------------------------------
Werewolves are #allergic to cinnamon#.
This is #highlighted# text.
--------------------------------------

[.big.red]*Result*

===============================================
Werewolves are #allergic to cinnamon#.
//             ^                        punctuation.definition.string.unquoted.single.begin
//                                  ^   punctuation.definition.string.unquoted.single.end
//              ^^^^^^^^^^^^^^^^^^^^    string.other.unquoted.single
//               ^^^^^^^^^^^^^^^^^^     string.unquoted.unquotedinner.single
This is #highlighted# text.
//      ^               punctuation.definition.string.unquoted.single.begin
//                  ^   punctuation.definition.string.unquoted.single.end
//       ^^^^^^^^^^^    string.other.unquoted.single
//        ^^^^^^^^^     string.unquoted.unquotedinner.single
===============================================

[.big.red]*Source*

[source,asciidoc]
----------------------------------------------
Do werewolves believe in [small]#small print#?
----------------------------------------------

[.big.red]*Result*

===============================================
Do werewolves believe in [small]#small print#?
//                       ^^^^^^^                support.variable.attributelist
//                              ^               punctuation.definition.string.unquoted.single.begin
//                                          ^   punctuation.definition.string.unquoted.single.end
//                               ^^^^^^^^^^^    string.other.unquoted.single
//                                ^^^^^^^^^     string.unquoted.unquotedinner.single
===============================================



== Highlight/Mark Unconstrained

[.big.red]*Source*

[source,asciidoc]
----------------------------
This is ##highlighted##text.
----------------------------

[.big.red]*Result*

===============================================
This is ##highlighted##text.
//      ^^               punctuation.definition.string.unquoted.double.begin
//                   ^^  punctuation.definition.string.unquoted.double.end
//      ^^^^^^^^^^^^^^^  string.other.unquoted.double
//        ^^^^^^^^^^^    string.unquoted.unquotedinner.double
===============================================

[.big.red]*Source*

[source,asciidoc]
------------------------------------
[big]##O##nce upon an infinite loop.
------------------------------------

[.big.red]*Result*

===============================================
[big]##O##nce upon an infinite loop.
//<-        support.variable.attributelist
//^^^       support.variable.attributelist
//   ^^     punctuation.definition.string.unquoted.double.begin
//      ^^  punctuation.definition.string.unquoted.double.end
//   ^^^^^  string.other.unquoted.double
//     ^    string.unquoted.unquotedinner.double

===============================================

== Multi-line

Mark and Span text can carry on across multiple lines:

=== Multi-line Constrained

[.big.red]*Source*

[source,asciidoc]
---------------------------
Werewolves are #allergic to
cinnamon#.
---------------------------

[.big.red]*Result*

===============================================
Werewolves are #allergic to
cinnamon#.
//      ^    punctuation.definition.string.unquoted.single.end
//^^^^^^^    string.other.unquoted.single
//^^^^^^     string.unquoted.unquotedinner.single
//       ^  -string.other.unquoted.single
//       ^  -string.unquoted.unquotedinner.single
===============================================

=== Multi-line Unconstrained

[.big.red]*Source*

[source,asciidoc]
---------------------------
Werewolves are ##allergic to
cinnamon##.
---------------------------

[.big.red]*Result*

===============================================
Werewolves are ##allergic to
cinnamon##.
//      ^^    punctuation.definition.string.unquoted.double.end
//^^^^^^^^    string.other.unquoted.double
//^^^^^^      string.unquoted.unquotedinner.double
//        ^  -string.other.unquoted.double
//        ^  -string.unquoted.unquotedinner.double
===============================================

== False Positives Checks

Let's test for false positive matches of `#` occurrences which are _not_ marked delimiters...


=== Literal Hash Character

The syntax now exploits context branching to detect literal `#` symbols and treat them accordingly without breaking syntax highlighting.

[.big.red]*Source*

[source,asciidoc]
---------------------------
Example #1 illustrates how
to achieve what described so far.
---------------------------

[.big.red]*Result*

===============================================
Example #1 illustrates how
//      ^ constant.character.literal.hash
to achieve what described so far.
===============================================


=== Escaped Hash Character

A `#` symbols preceded by the `\` escape symbol should not be considered a marked delimiter.

[.big.red]*Source*

[source,asciidoc]
---------------------------
Ecaped \#hash# not marked.
---------------------------

[.big.red]*Result*

===============================================
Ecaped \#hash# not marked.
//     ^^        constant.character.escape
//      ^       -constant.character.literal.hash
//      ^       -punctuation.definition.string.unquoted
//           ^  -punctuation.definition.string.unquoted
//           ^   constant.character.literal.hash
===============================================


=== HTML Entities Safeguard

Proper handling of numerical HTML/XML entities should prevent the `#` symbol in their definition from being treated as a constrained marked delimiter -- i.e. by ensuring that HTML entities are being handled with a higher priority, but also via proper RegEx definitions checking the surrounding characters of marked delimiters.

[.big.red]*Source*

[source,asciidoc]
-------------------------------------------
HTML entity &#169; is the Copyright symbol.
-------------------------------------------

[.big.red]*Result*

===========================================
HTML entity &#169; is the Copyright symbol.
//           ^      -constant.character.literal.hash
//           ^      -punctuation.definition.string.unquoted
//          ^^^^^^   constant.character.entity.xml
===========================================


=== Multi-line Fail-safes

But if a blank line is found before matching the closing delimiter, then the syntax bails out to prevent breaking the whole document.

This mechanism is a fail-safe against false positive matches of literal `#` symbols as if they were a mark delimiter, which unfortunately still occur in the current syntax.


==== Multi-line Unconstrained w/ Blank Line

[.big.red]*Source*

[source,asciidoc]
---------------------------
Example ##1 illustrates how
to achieve what described so far.

Lorem ipsum.
---------------------------

[.big.red]*Result*

===============================================
Example ##1 illustrates how
to achieve what described so far.

// <- invalid.illegal
Lorem ipsum.
//^^^^^^^^^^  -string.other.unquoted
//^^^^^^^^^^  -string.unquoted.unquotedinner
===============================================

// EOF //
